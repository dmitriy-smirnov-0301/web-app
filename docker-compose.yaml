services:
  postgres:
    container_name: database
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./configs/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - app_network

  app:
    container_name: application
    image: dmitriysmirnov0301/ice-creams-app:latest
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      APP_ENV: docker
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      DB_NAME_ICECREAMS_CATALOG: ${DB_NAME_ICECREAMS_CATALOG}
      DB_NAME_USER_DATA: ${DB_NAME_USER_DATA}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SSLMODE: ${DB_SSLMODE}
      DB_CONNTIMEOUT: ${DB_CONNTIMEOUT}
    ports:
      - "8080:8080"
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  pgdata:
